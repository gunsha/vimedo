#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('VIMEDO:server');
var http = require('http');

var io = require('socket.io');
var MensajesController = require('../controllers/MensajesController.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

io = io.listen(server);
var clients = {};
io.on('connection', function(socket) {
    
    if(socket.handshake.query.id && socket.handshake.query.idu)
    clients[socket.handshake.query.id+''+socket.handshake.query.idu] = socket;
    if(socket.handshake.query.idu)
    clients[socket.handshake.query.idu] = socket;
    
    socket.on('socket/mensajeria/send', function(msg){
        if(clients[msg.solicitud+''+msg.to]){
          msg.read = true;
          clients[msg.solicitud+''+msg.to].emit('socket/mensajeria/receive', msg);
        }
        if(clients[msg.to])
          clients[msg.to].emit('socket/mensajeria/newMsg', msg);
        MensajesController.createSocket(msg);
      clients[msg.solicitud+''+msg.from].emit('socket/mensajeria/sended', msg);
    });
    
    socket.on('socket/mensajeria/read', function() {
      MensajesController.markAsReadSocket(socket.handshake.query.id,socket.handshake.query.idu);
      if(clients[socket.handshake.query.id+''+socket.handshake.query.iduTo])
      clients[socket.handshake.query.id+''+socket.handshake.query.iduTo].emit('socket/mensajeria/markRead');
    });

    socket.on('disconnect', function() {
        clients[socket.handshake.query.id+''+socket.handshake.query.idu] = false;
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

console.log("Running at Port number " + port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
