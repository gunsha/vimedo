{"version":3,"sources":["app.js","indexService.js","indexCtrl.js","navService.js","navCtrl.js","authService.js","authCtrl.js","profesionalesService.js","profesionalesCtrl.js","pacientesService.js","pacientesCtrl.js","solicitudesService.js","solicitudesCtrl.js","states.js","modal-nueva-solicitud.js"],"names":["appendModal","prevTarget","checkeventcount","$","on","e","target","preventDefault","appendTo","modal","indexService","r","h","solicitudes","get","apiRoute","then","resp","data","getSolicitudes","indexCtrl","s","solicitudesService","profesionalesService","$state","t","$compile","NgMap","growl","decodePolyline","str","precision","latitude_change","longitude_change","index","lat","lng","coordinates","shift","result","byte","factor","Math","pow","length","charCodeAt","push","vm","this","googleMapsUrl","profesionales","profesionalesD","profesionalesOrig","solicitudesOrig","filterListS","lower","queryS","toLowerCase","filter","i","afiliado","personaFisica","nroDocumento","indexOf","nombre","apellido","filterListP","queryP","matricula","filterListPD","queryPD","centrarMapa","getMap","map","latlng","google","maps","LatLng","setCenter","centerAndZoom","bounds","LatLngBounds","latlngArray","extend","fitBounds","ocultarInfoWindows","infowindows","close","calcularRutaProfesional","id","response","ruta","polylines","setMap","routes","legs","flightPlanCoordinates","leg","ii","steps","step","points","polyline","z","flightPath","Polyline","path","geodesic","strokeColor","getColor","strokeOpacity","strokeWeight","initMap","solicitudesMarks","profesionalMark","asignandoProfesional","listActive","solicitud","contentString","domicilio","calle","numero","estado","_id","compiledContent","infowindow","InfoWindow","content","icon","client","latitud","longitud","mark","Marker","addListener","setContent","open","setPosition","cargarProfesionales","getList","profesional","calcularRutaSolicitud","asignarProfesional","solicitudId","vistaAsignarProfesional","confirmarProfesional","solicitudMedica","setProfesional","collapse","success","finishSolicitud","solSel","swal","title","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","setDefaults","input","animation","progressSteps","text","queue","resetDefaults","indicaciones","observaciones","finalizar","color","floor","random","newSolicitudModal","newSol","newSolicitud","sintomas","antecedentes","finishSaveSolicitud","scope","angular","element","ctrl","navService","navCtrl","$location","$anchorScroll","state","logout","user","navigate","section","name","go","animate","scrollTop","offset","top","authService","login","cred","method","url","skipAuthorization","signUp","isPro","isProfesional","forgot","reset","authCtrl","jwtHelper","wrongUserError","done","newUser","telefonosA","domicilios","credenciales","localStorage","setItem","jwt","decoded","decodeToken","sub","usuario","profile","admin","initials","toUpperCase","setStorage","hasRole","forgotPass","resetPass","removeDom","splice","addTel","telefono","removeTel","validateSave","error","saveNew","telefonos","toString","Boolean","placeChanged","place","getPlace","componentForm","street_number","route","locality","administrative_area_level_1","country","postal_code","direccion","address_components","addressType","types","val","geometry","location","coordenadas","afilDir","registrarse","create","obj","post","update","put","profesionalesCtrl","modalPro","tableConfig","maxPages","itemsPerPage","filterList","query","view","item","updateList","newPro","edit","copy","split","fechaNacimiento","nacimiento","Date","saveEdit","savePro","pacientesService","list","remove","delete","pacientesCtrl","afiliados","afiliadosOrg","modalAfil","afilSel","viewAfil","afil","saveAfil","newAfil","cieAutocomplete","term","autocompleteAfiliado","finalizarSolicitud","autocompleteCie10","solicitudesCtrl","objSel","newModal","finishSave","monthsShortDot$1","monthsShort$2","moment","defineLocale","months","monthsShort","m","format","test","month","monthsParseExact","weekdays","weekdaysShort","weekdaysMin","weekdaysParseExact","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","hours","nextDay","nextWeek","lastDay","lastWeek","sameElse","relativeTime","future","past","mm","hh","d","dd","M","MM","y","yy","dayOfMonthOrdinalParse","ordinal","week","dow","doy","module","run","authManager","hideNav","navTitle","active","current","isAuthenticated","getItem","JSON","stringify","getStorage","parse","removeItem","role","rolName","hasAnyRole","roles","findByAttr","a","q","attr","checkAuthOnRefresh","redirectWhenUnauthenticated","$on","getEstado","event","toState","toParams","fromState","fromParams","hideGrowl","requiresLogin","requiresRole","pageTitle","removeClass","unfoundState","showWait","loading","dismissWait","factory","$q","status","message","block","when","responseError","msg","reject","config","$httpProvider","jwtOptionsProvider","growlProvider","blockUIConfig","whiteListedDomains","unauthenticatedRedirector","warning","loginPath","tokenGetter","options","substr","interceptors","globalTimeToLive","globalDisableCountDown","globalDisableIcons","template","$sce","trustAsHtml","count","rText","charAt","slice","substring","replace","date","short","getMonth","getFullYear","getDate","words","join","directive","attrs","bind","which","$apply","$eval","ngEnter","require","link","ngModel","$parsers","parseInt","$formatters","$stateProvider","$urlRouterProvider","$locationProvider","otherwise","views","@","templateUrl","navView@app","controller","sidemenu@app","contentView@app","loginView@app","navView@admin","sidemenu@admin","contentView@admin","html5Mode","component","bindings","finishAction","$onInit","uniqueId","String","performance","now","autocompleteCie","autocompleteAfil","selectSintoma","dec10","asyncSelected","asyncSelectedA","removeSintoma","domicilioSel","sintomasCie","antecedentesCie","req","horasSintomas","minutosSintomas"],"mappings":"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","file":"../app.js","sourcesContent":["// var apiRoute = 'http://vimedo.gunsha.c9users.io:8080';\n// var client = \"http://vimedo.gunsha.c9users.io:8081\";\n// var apiRoute = 'http://localhost:3000';\n// var client = \"http://localhost:3001\";\n\nvar apiRoute = 'http://apivimedo.us-east-1.elasticbeanstalk.com';\nvar client = 'http://test.vimedo.com.s3-website-us-east-1.amazonaws.com';\n\nvar monthsShortDot$1 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');\nvar monthsShort$2 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\n\nmoment.defineLocale('es', {\n    months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n    monthsShort: function(m, format) {\n        if (!m) {\n            return monthsShortDot$1;\n        } else if (/-MMM-/.test(format)) {\n            return monthsShort$2[m.month()];\n        } else {\n            return monthsShortDot$1[m.month()];\n        }\n    },\n    monthsParseExact: true,\n    weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n    weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n    weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n    weekdaysParseExact: true,\n    longDateFormat: {\n        LT: 'H:mm',\n        LTS: 'H:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [de] MMMM [de] YYYY',\n        LLL: 'D [de] MMMM [de] YYYY H:mm',\n        LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n    },\n    calendar: {\n        sameDay: function() {\n            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';\n        },\n        nextDay: function() {\n            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';\n        },\n        nextWeek: function() {\n            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';\n        },\n        lastDay: function() {\n            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';\n        },\n        lastWeek: function() {\n            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';\n        },\n        sameElse: 'L'\n    },\n    relativeTime: {\n        future: 'en %s',\n        past: 'hace %s',\n        s: 'unos segundos',\n        m: 'un minuto',\n        mm: '%d minutos',\n        h: 'una hora',\n        hh: '%d horas',\n        d: 'un día',\n        dd: '%d días',\n        M: 'un mes',\n        MM: '%d meses',\n        y: 'un año',\n        yy: '%d años'\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}º/,\n    ordinal: '%dº',\n    week: {\n        dow: 1, // Monday is the first day of the week.\n        doy: 4 // The week that contains Jan 4th is the first week of the year.\n    }\n});\n\nangular.module('vimedo', ['ui.router', 'angular-jwt', 'angular-growl', 'angular-table', 'ngAvatar', 'blockUI', 'ngMap','ngAnimate','ui.bootstrap.datetimepicker','ui.bootstrap','angularMoment'])\n    .run(['$rootScope', '$state', 'authManager', 'jwtHelper', '$anchorScroll', 'growl', function(r, s, authManager, jwtHelper, $anchorScroll, growl) {\n        r.hideNav = false;\n        r.navTitle = '';\n        r.active = s.current.name;\n        if (authManager.isAuthenticated() && !r.user) {\n            r.user = jwtHelper.decodeToken(localStorage.getItem('id_token')).sub.usuario;\n        }\n\n        r.setStorage = function(name, obj) {\n            localStorage.setItem(name, JSON.stringify(obj));\n        };\n\n        r.getStorage = function(name) {\n            return JSON.parse(localStorage.getItem(name));\n        };\n\n        r.logout = function() {\n            localStorage.removeItem('id_token');\n            localStorage.removeItem('profile');\n            r.user = false;\n            s.go('app.login');\n        };\n\n        r.hasRole = function(role) {\n            if (r.user && r.user.rolName) {\n                if (typeof r.user.rolName === \"string\") {\n                    return r.user.rolName === role;\n                } else {\n                    for (var i in r.user.rolName) {\n                        if (r.user.rolName[i] === role)\n                            return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        r.hasAnyRole = function(roles) {\n            if (r.user && r.user.rolName) {\n                for (var e in roles) {\n                    if (typeof r.user.rolName === \"string\") {\n                        return r.user.rolName === roles[e];\n                    } else {\n                        for (var i in r.user.rolName) {\n                            if (r.user.rolName[i] === roles[e])\n                                return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n        r.findByAttr = function(a, q, attr) {\n            return a.filter(function(i) {\n                if (i[attr] === q) {\n                    return i;\n                }\n                return false;\n            })[0];\n        };\n        authManager.checkAuthOnRefresh();\n        authManager.redirectWhenUnauthenticated();\n        r.$on('tokenHasExpired', function() {\n            r.logout();\n        });\n\n        r.getEstado = function(s){\n            if(s === 0){\n                return 'Pendiente';\n            }else if(s === 1){\n                return 'En Curso';\n            }else if (s === 2) {\n                return 'Cerrado';\n            }\n        }\n\n        r.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {\n            r.profile = r.getStorage('profile');\n            r.hideNav = false;\n            r.hideGrowl = toState.data && toState.data.hideGrowl;\n            if (toState.data && toState.data.requiresLogin && !r.user || (toState.data && toState.data.requiresRole && !r.hasAnyRole(toState.data.requiresRole))) {\n                growl.error('acceso no autorizado');\n                event.preventDefault();\n                s.go('app.login');\n                $('.modal').modal('hide');\n            }\n            $anchorScroll(0);\n        });\n\n        r.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {\n            if (toState.data && toState.data.pageTitle)\n                r.navTitle = toState.data.pageTitle;\n            r.active = s.current.name;\n            $('body').removeClass('sidebar-open');\n            if (!r.user && s.current.name !== 'app.signup')\n                s.go('app.login');\n        });\n\n        r.$on('$stateNotFound', function(event, unfoundState, fromState, fromParams) {\n            s.go('app');\n        });\n\n        r.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n            s.go('app');\n        });\n\n        r.showWait = function() {\n            r.loading = true;\n        };\n        r.dismissWait = function() {\n            r.loading = false;\n        };\n    }])\n    .factory('httpInerceptor', ['$q', 'growl', '$rootScope', function($q, growl, r) {\n        return {\n            response: function(response) {\n                if (response.data.status !== 406 && response.data.message)\n                    growl.success(response.data.message);\n                r.block = false;\n                return response || $q.when(response);\n            },\n            responseError: function(response) {\n                var msg;\n                if (response.status == 406) {\n                    msg = response.data.message;\n                } else if (response.status == 403) {\n                    r.logout();\n                } else {\n                    msg = \"Ocurrio un error inesperado.\";\n                }\n                growl.error(msg);\n                return $q.reject(response);\n            }\n        };\n    }])\n    .config(['$httpProvider', 'jwtOptionsProvider', 'growlProvider', 'blockUIConfig',\n        function($httpProvider, jwtOptionsProvider, growlProvider, blockUIConfig) {\n            jwtOptionsProvider.config({\n                whiteListedDomains: ['localhost',apiRoute],\n                unauthenticatedRedirector: ['$state', 'growl', function($state, growl) {\n                    $state.go('app.login');\n                    growl.warning('Su sesi&oacute;n ha expirado.');\n                }],\n                loginPath: 'app.login',\n                tokenGetter: ['options', function(options) {\n                    // Skip authentication for any requests ending in .html\n                    if (options && options.url && options.url.substr(options.url.length - 5) == '.html') {\n                        return null;\n                    }\n                    return localStorage.getItem('id_token');\n                }]\n            });\n            $httpProvider.interceptors.push('jwtInterceptor');\n            $httpProvider.interceptors.push('httpInerceptor');\n            growlProvider.globalTimeToLive(3000);\n            growlProvider.globalDisableCountDown(true);\n            growlProvider.globalDisableIcons(true);\n            blockUIConfig.template = '<div class=\"cssload-container\"><div class=\"cssload-speeding-wheel\"></div></div>';\n\n        }\n    ])\n    .filter('unsafe', ['$sce', function($sce) {\n        return $sce.trustAsHtml;\n    }])\n    .filter('splitComma', function() {\n        return function(input) {\n            var text = typeof input === 'string' ? input.split(',') : input;\n            var count = 0;\n            var rText = '';\n            text.map(function(i) {\n                rText += i.charAt(0).toUpperCase() + i.slice(1).toLowerCase() + ',';\n                if (count % 2 == 1 && count !== text.length - 1) {\n                    rText += '<br>';\n                }\n                count++;\n            });\n            return rText.substring(0, rText.length - 1);\n        };\n    })\n    .filter('replaceCommaSpace', function() {\n        return function(input) {\n            if (input)\n                return input.replace(/,/g, ' ');\n        };\n    })\n    .filter('monthNameUC', function() {\n        return function(input) {\n            var date = new Date(input);\n            return months.short[date.getMonth()].toUpperCase();\n        };\n    })\n    .filter('year', function() {\n        return function(input) {\n            var date = new Date(input);\n            return date.getFullYear();\n        };\n    })\n    .filter('fullDateShort', function() {\n        return function(input) {\n            var date = new Date(input);\n            return date.getDate() + ' ' + months.short[date.getMonth()] + ' ' + date.getFullYear();\n        };\n    })\n    .filter('upperCaseFL', function() {\n        return function(input) {\n            if (input) {\n                var words = input.split(' ');\n                for (var i in words) {\n                    words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1).toLowerCase();\n                }\n                return words.join(' ');\n            }\n        };\n    })\n    .directive('ngEnter', function() {\n        return function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(event) {\n                if (event.which === 13) {\n                    event.preventDefault();\n                    scope.$apply(function() {\n                        scope.$eval(attrs.ngEnter, {\n                            'event': event\n                        });\n                    });\n                }\n            });\n        };\n    })\n    .directive('convertToNumber', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(val) {\n        return val != null ? parseInt(val, 10) : null;\n      });\n      ngModel.$formatters.push(function(val) {\n        return val != null ? '' + val : null;\n      });\n    }\n  };\n});\n//FIX PARA MODALES EN TEMPLATES\nfunction appendModal() {\n    var checkeventcount = 1,\n        prevTarget;\n    $('.modal').on('show.bs.modal', function(e) {\n        if (typeof prevTarget == 'undefined' || (checkeventcount == 1 && e.target != prevTarget)) {\n            prevTarget = e.target;\n            checkeventcount++;\n            e.preventDefault();\n            $(e.target).appendTo('body').modal('show');\n        } else if (e.target == prevTarget && checkeventcount == 2) {\n            checkeventcount--;\n        }\n    });\n}","angular.module('vimedo').factory('indexService', ['$rootScope','$http',indexService]);\n\nfunction indexService(r,h) {\n    var service = {\n        getSolicitudes: solicitudes\n    };\n\n    return service;\n\n    function solicitudes(){\n    \treturn h.get(apiRoute +'/solicitudesMedicas').then(function(resp){\n    \t\treturn resp.data;\n    \t});\n\n    }\n}","angular.module('vimedo').controller('indexCtrl', ['$scope', '$rootScope', 'indexService', 'solicitudesService', 'profesionalesService', '$state', '$timeout', '$compile', 'NgMap', 'growl', indexCtrl]);\n\nfunction indexCtrl(s, r, indexService, solicitudesService, profesionalesService, $state, t, $compile, NgMap, growl) {\n\n    var vm = this;\n    vm.googleMapsUrl = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyA02b574ia3BpLXpDZXU2gOFuQZTfC_Kks';\n    vm.profesionales = [];\n    vm.profesionalesD = [];\n    vm.profesionalesOrig = [];\n    vm.solicitudes = [];\n    vm.solicitudesOrig = [];\n\n    vm.filterListS = function() {\n        var lower = vm.queryS.toLowerCase();\n        vm.solicitudes = vm.solicitudesOrig\n            .filter(function(i) {\n                if (i.afiliado.personaFisica &&\n                    (i.afiliado.personaFisica.nroDocumento.toLowerCase().indexOf(lower) !== -1 ||\n                        i.afiliado.personaFisica.nombre.toLowerCase().indexOf(lower) !== -1 ||\n                        i.afiliado.personaFisica.apellido.toLowerCase().indexOf(lower) !== -1)) {\n                    return i;\n                }\n            });\n    }\n    vm.filterListP = function() {\n        var lower = vm.queryP.toLowerCase();\n        vm.profesionales = vm.profesionalesOrig\n            .filter(function(i) {\n                if (i.personaFisica &&\n                    (i.personaFisica.nroDocumento.toLowerCase().indexOf(lower) !== -1 ||\n                        i.personaFisica.nombre.toLowerCase().indexOf(lower) !== -1 ||\n                        i.personaFisica.apellido.toLowerCase().indexOf(lower) !== -1) ||\n                    i.matricula.toLowerCase().indexOf(lower) !== -1) {\n                    return i;\n                }\n            });\n    }\n    vm.filterListPD = function() {\n        var lower = vm.queryPD.toLowerCase();\n        vm.profesionalesD = vm.profesionalesOrig\n            .filter(function(i) {\n                if (i.personaFisica &&\n                    (i.personaFisica.nroDocumento.toLowerCase().indexOf(lower) !== -1 ||\n                        i.personaFisica.nombre.toLowerCase().indexOf(lower) !== -1 ||\n                        i.personaFisica.apellido.toLowerCase().indexOf(lower) !== -1) ||\n                    i.matricula.toLowerCase().indexOf(lower) !== -1) {\n                    return i;\n                }\n            });\n    }\n\n    vm.centrarMapa = function(lat, lng) {\n        NgMap.getMap(\"map\").then(function(map) {\n            var latlng = new google.maps.LatLng(lat, lng);\n            vm.map.setCenter(latlng);\n        });\n    };\n\n    vm.centerAndZoom = function() {\n        // NgMap.getMap(\"map\").then(function(map) {\n            var bounds = new google.maps.LatLngBounds();\n            for (var i = 0; i < vm.latlngArray.length; i++) {\n                bounds.extend(vm.latlngArray[i]);\n            }\n            vm.map.fitBounds(bounds);\n        // });\n    };\n\n    vm.ocultarInfoWindows = function() {\n        for (var i = 0; i < vm.infowindows.length; i++) {\n            vm.infowindows[i].close();\n        }\n    };\n\n    vm.calcularRutaProfesional = function(id) {\n        solicitudesService.calcularRutaProfesional(id)\n            .then(function(response) {\n\n                var ruta = response;\n                NgMap.getMap(\"map\").then(function(map) {\n                    for (var i = 0; i < vm.polylines.length; i++) {\n                        vm.polylines[i].setMap(null);\n                    }\n                    vm.polylines = [];\n\n                    for (var i = 0; i < ruta.routes[0].legs.length; i++) {\n                        var flightPlanCoordinates = [];\n                        var leg = ruta.routes[0].legs[i];\n                        for (var ii = 0; ii < leg.steps.length; ii++) {\n                            var step = leg.steps[ii];\n                            var points = decodePolyline(step.polyline.points);\n                            for (var z = 0; z < points.length; z++) {\n                                flightPlanCoordinates.push(points[z]);\n                            }\n                        }\n                        var flightPath = new google.maps.Polyline({\n                            path: flightPlanCoordinates,\n                            geodesic: true,\n                            strokeColor: getColor(),\n                            strokeOpacity: 1.0,\n                            strokeWeight: 2\n                        });\n                        vm.polylines.push(flightPath);\n                        flightPath.setMap(map);\n\n                    }\n\n                });\n            });\n    };\n\n    vm.initMap = function() {\n        vm.polylines = [];\n        vm.latlngArray = [];\n        vm.solicitudesMarks = [];\n        vm.profesionalMark = [];\n        vm.asignandoProfesional = false;\n        vm.infowindows = [];\n        solicitudesService.listActive().then(function(response) {\n            vm.solicitudes = response;\n            vm.solicitudesOrig = response;\n            NgMap.getMap(\"map\").then(function(map) {\n                vm.map = map;\n                for (var i = 0; i < vm.solicitudes.length; i++) {\n                    var solicitud = vm.solicitudes[i];\n                    var contentString = '<div id=\"content\"><h5>' +\n                        solicitud.afiliado.personaFisica.nombre + ' ' + solicitud.afiliado.personaFisica.apellido +\n                        '</h5><div>' + solicitud.domicilio.calle + ' ' + solicitud.domicilio.numero + '</div><div>';\n                    if (solicitud.estado == 0) {\n                        contentString += '<button type=\"button\" class=\"btn btn-primary btn-xs\" onclick=\"asignarProfesional(&quot;' + solicitud._id + '&quot;)\">Asignar Prestador</button></div>';\n                    }\n                    contentString += '</div>';\n                    var compiledContent = $compile(contentString)(vm);\n                    var infowindow = new google.maps.InfoWindow({\n                        content: contentString\n                    });\n                    vm.infowindows.push(infowindow);\n                    var icon;\n                    switch (solicitud.estado) {\n                        case 0:\n                            icon = client + \"/img/red-dot.png\";\n                            break;\n                        case 1:\n                            icon = client + \"/img/green-dot.png\";\n                            break;\n                    }\n                    var latlng = new google.maps.LatLng(solicitud.domicilio.latitud, solicitud.domicilio.longitud);\n                    vm.latlngArray.push(latlng);\n                    var mark = new google.maps.Marker({\n                        icon: icon,\n                        estado: solicitud.estado,\n                        solicitud: solicitud\n                    });\n                    mark.infowindow = infowindow;\n\n                    //finally call the explicit infowindow object\n                    mark.addListener('click', function() {\n                        // vm.ocultarInfoWindows();\n                        this.infowindow.setContent(compiledContent);\n                        // vm.calcularRutaSolicitud(this.solicitud);\n                        return this.infowindow.open(map, this);\n                    });\n                    mark.setPosition(latlng);\n                    mark.setMap(map);\n                    vm.map.setCenter(latlng);\n                    vm.solicitudesMarks.push(mark);\n                }\n                vm.cargarProfesionales();\n            });\n        });\n    }\n\n    vm.cargarProfesionales = function() {\n        profesionalesService.getList().then(function(data) {\n            vm.profesionales = data;\n            vm.profesionalesD = data;\n            vm.profesionalesOrig = data;\n\n\n\n            for (var i = 0; i < vm.profesionalesOrig.length; i++) {\n                vm.profesionalesOrig[i];\n\n                var latlng = new google.maps.LatLng(vm.profesionalesOrig[i].latitud, vm.profesionalesOrig[i].longitud);\n                vm.latlngArray.push(latlng);\n                var mark = new google.maps.Marker({\n                    icon: client + \"/img/doctor.png\",\n                    profesional: vm.profesionalesOrig[i]\n                });\n\n\n                //finally call the explicit infowindow object\n                mark.addListener('click', function() {\n                    vm.ocultarInfoWindows();\n                    if (vm.asignandoProfesional) {\n                        var contentString = '<div id=\"content\"><h5>' +\n                            this.profesional.personaFisica.nombre + ' ' + this.profesional.personaFisica.apellido +\n                            '</h5>' +\n                            '<button type=\"button\" class=\"btn btn-primary btn-xs\" onclick=\"confirmarProfesional(&quot;' + this.profesional._id + '&quot;)\">Aceptar</button></div>'; +\n                        '</div>';\n                        var compiledContent = $compile(contentString)(s);\n                        var infowindow = new google.maps.InfoWindow({\n                            content: contentString\n                        });\n                        vm.infowindows.push(infowindow);\n                        this.infowindow = infowindow;\n                        this.infowindow.setContent(compiledContent);\n                        return this.infowindow.open(vm.map, this);\n                    } else {\n                        var contentString = '<div id=\"content\"><h5>' +\n                            this.profesional.personaFisica.nombre + ' ' + this.profesional.personaFisica.apellido +\n                            '</h5></div>';\n\n                        var compiledContent = $compile(contentString)(s);\n                        var infowindow = new google.maps.InfoWindow({\n                            content: contentString\n                        });\n                        vm.infowindows.push(infowindow);\n                        this.infowindow = infowindow;\n                        this.infowindow.setContent(compiledContent);\n                        vm.calcularRutaProfesional(this.profesional._id);\n                        return this.infowindow.open(vm.map, this);\n                    }\n\n                })\n\n                mark.setPosition(latlng);\n                mark.setMap(vm.map);\n\n                vm.profesionalMark.push(mark);\n\n                \n            }\n            vm.centerAndZoom();\n\n        });\n    };\n    vm.calcularRutaSolicitud = function(solicitud) {\n        if (solicitud.estado === 0) {\n            return false;\n        }\n        solicitudesService.calcularRutaSolicitud(solicitud._id).then(function(response) {\n            var ruta = response;\n            NgMap.getMap(\"map\").then(function(map) {\n                for (var i = 0; i < vm.polylines.length; i++) {\n                    vm.polylines[i].setMap(null);\n                }\n                vm.polylines = [];\n\n                for (var i = 0; i < ruta.routes[0].legs.length; i++) {\n                    var flightPlanCoordinates = [];\n                    var leg = ruta.routes[0].legs[i];\n                    for (var ii = 0; ii < leg.steps.length; ii++) {\n                        var step = leg.steps[ii];\n                        var points = decodePolyline(step.polyline.points);\n                        for (var z = 0; z < points.length; z++) {\n                            flightPlanCoordinates.push(points[z]);\n                        }\n\n                    }\n                    var flightPath = new google.maps.Polyline({\n                        path: flightPlanCoordinates,\n                        geodesic: true,\n                        strokeColor: getColor(),\n                        strokeOpacity: 1.0,\n                        strokeWeight: 2\n                    });\n                    vm.polylines.push(flightPath);\n                    flightPath.setMap(map);\n                }\n            });\n\n        });\n    };\n\n    vm.asignarProfesional = function(id) {\n        vm.ocultarInfoWindows();\n        NgMap.getMap(\"map\").then(function(map) {\n            vm.solicitudId = id;\n            vm.asignandoProfesional = true;\n            for (var i = 0; i < vm.solicitudesMarks.length; i++) {\n                var mark = vm.solicitudesMarks[i];\n                if (mark.solicitud._id != id) {\n                    mark.setMap(null);\n                }\n            }\n            for (var i = 0; i < vm.polylines.length; i++) {\n                var polyline = vm.polylines[i];\n                polyline.setMap(null);\n            }\n            vm.polylines = [];\n        });\n    };\n\n    vm.vistaAsignarProfesional = function(id) {\n        vm.solicitudId = id;\n        vm.queryP = '';\n        vm.filterListP();\n        $('#modalPro').modal();\n    };\n    vm.confirmarProfesional = function(profesional) {\n        vm.ocultarInfoWindows();\n        var data = {\n            solicitudMedica: {\n                _id: vm.solicitudId\n            },\n            profesional: {\n                _id: profesional\n            }\n        };\n        solicitudesService.setProfesional(data).then(function() {\n            $('#modalPro').modal('hide');\n            $('.collapse').collapse('hide')\n            vm.initMap();\n            growl.success('Profesional asignado.')\n        });\n    };\n    vm.finishSolicitud = function(s) {\n        vm.solSel = s;\n        swal({\n            title: 'Cerrar la solicitud?',\n            type: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Aceptar'\n        }).then(function() {\n            swal.setDefaults({\n                input: 'text',\n                confirmButtonText: 'Siguiente &rarr;',\n                showCancelButton: true,\n                animation: true,\n                progressSteps: ['1', '2']\n            })\n\n            var steps = [{\n                title: 'Indicaciones',\n                text: 'Indicaciones para el paciente'\n            }, {\n                title: 'Observaciones',\n                text: 'Obsrvaciones de la visita'\n            }]\n            swal.queue(steps).then(function(result) {\n                swal.resetDefaults();\n                vm.solSel.indicaciones = result[0];\n                vm.solSel.observaciones = result[1];\n                solicitudesService.finalizar(vm.solSel).then(function() {\n                    swal({\n                        text: 'La solicitud ha sido cerrada.',\n                        type: 'success',\n                        showCancelButton: false,\n                        confirmButtonColor: '#3085d6',\n                        confirmButtonText: 'Aceptar'\n                    });\n                    vm.initMap();\n                }, function() {\n                    swal({\n                        title: 'Ocurrio un error.',\n                        text: 'Intente mas tarde.',\n                        type: 'error',\n                        showCancelButton: false,\n                        confirmButtonColor: '#3085d6',\n                        confirmButtonText: 'Aceptar'\n                    });\n                })\n\n            }, function() {\n                swal.resetDefaults();\n            })\n\n        })\n    };\n\n    function decodePolyline(str, precision) {\n        var index = 0,\n            lat = 0,\n            lng = 0,\n            coordinates = [],\n            shift = 0,\n            result = 0,\n            byte = null,\n            latitude_change,\n            longitude_change,\n            factor = Math.pow(10, precision || 5);\n\n        // Coordinates have variable length when encoded, so just keep\n        // track of whether we've hit the end of the string. In each\n        // loop iteration, a single coordinate is decoded.\n        while (index < str.length) {\n            {}\n\n            // Reset shift, result, and byte\n            byte = null;\n            shift = 0;\n            result = 0;\n\n            do {\n                byte = str.charCodeAt(index++) - 63;\n                result |= (byte & 0x1f) << shift;\n                shift += 5;\n            } while (byte >= 0x20);\n\n            latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n            shift = result = 0;\n\n            do {\n                byte = str.charCodeAt(index++) - 63;\n                result |= (byte & 0x1f) << shift;\n                shift += 5;\n            } while (byte >= 0x20);\n\n            longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\n\n            lat += latitude_change;\n            lng += longitude_change;\n\n            coordinates.push({\n                lat: lat / factor,\n                lng: lng / factor\n            });\n        }\n\n        return coordinates;\n    };\n\n    var getColor = function() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    };\n\n    ///NUEVA SOLICITUD\n    vm.newSolicitudModal = '';\n    vm.newSol = function() {\n        vm.newSolicitud = {\n            sintomas: [],\n            antecedentes: []\n        };\n        $(vm.newSolicitudModal).modal();\n    };\n    vm.finishSaveSolicitud = function() {\n        vm.newSolicitud = {\n            sintomas: [],\n            antecedentes: []\n        };\n        vm.initMap();\n        $(vm.newSolicitudModal).modal('hide');\n    }\n}\n\nfunction asignarProfesional(data) {\n    var scope = angular.element('#accordion').scope();\n    if (scope && scope.ctrl)\n        scope.ctrl.asignarProfesional(data);\n}\n\nfunction confirmarProfesional(data) {\n    var scope = angular.element('#accordion').scope();\n    if (scope && scope.ctrl)\n        scope.ctrl.confirmarProfesional(data);\n}","angular.module('vimedo').factory('navService', ['$rootScope',navService]);\n\nfunction navService(r) {\n    var service = {\n    };\n\n    return service;\n\n}","angular.module('vimedo').controller('navCtrl', ['$scope','$rootScope','$location',\n'$anchorScroll' , 'navService', '$state', navCtrl]);\n\nfunction navCtrl(s, r, $location, $anchorScroll, navService, state){\n\n    var vm = this;\n    // vm.user = r.user;\n    vm.logout = function(){\n      r.user = false;\n    };\n\n    vm.navigate = function(section){\n    \tif(state.name !== 'app')\n    \t\tstate.go('app');\n    \t$('html, body').animate({\n            scrollTop: $(\"#\"+section).offset().top - 67\n        }, 1000);\n    };\n    \n}","angular.module('vimedo')\n.factory('authService', ['$rootScope','$http', authService]);\n\nfunction authService(r,h) {\n    var service = {\n        login: login,\n        reset: reset,\n        forgot:forgot,\n        signUp:signUp\n    };\n    return service;\n\n    function login(cred) {  \n      return h({method:'POST',url:apiRoute+'/users/login',data:cred,skipAuthorization: true}).then(function(resp){\n      \t\treturn resp.data;\n      });\n    }\n\n    function signUp(cred,isPro) {  \n      if(isPro){\n        cred.isProfesional = isPro;\n      }else{\n        cred.afiliado = cred.personaFisica;  \n      }      \n      return h({method:'POST',url:apiRoute+'/users/register',data:cred,skipAuthorization: true}).then(function(resp){\n          return resp.data;\n      });\n    }\n\n    function forgot(cred) {\n      return h({method:'POST',url:apiRoute+'/api/auth/forgot',data:cred,skipAuthorization: true}).then(function(resp){\n          return resp.data;\n      });\n    }\n\n    function reset(cred) {\n      return h({method:'POST',url:apiRoute+'/api/auth/resetPassword',data:cred,skipAuthorization: true}).then(function(resp){\n          return resp.data;\n      });\n    }\n}","angular.module('vimedo').controller('authCtrl', ['$scope', '$rootScope', 'authService', '$state', 'jwtHelper', '$timeout', 'NgMap', 'growl', authCtrl]);\n\nfunction authCtrl(s, r, authService, state, jwtHelper, t, NgMap, growl) {\n\n    var vm = this;\n    vm.wrongUserError = false;\n\n    vm.isPro = false;\n\n    vm.done = false;\n\n    vm.newUser = {\n        personaFisica: {\n            telefonosA: [],\n            domicilios: []\n        }\n    };\n\n    NgMap.getMap().then(function(map) {\n        vm.map = map;\n    });\n\n    vm.login = function() {\n        authService.login(vm.credenciales).then(function(data) {\n            vm.wrongUserError = false;\n            localStorage.setItem('id_token', data.jwt);\n            r.decoded = jwtHelper.decodeToken(data.jwt);\n            r.user = r.decoded.sub.usuario;\n            var profile = {};\n            if (r.user.admin) {\n                profile = r.user.admin.personaFisica;\n            } else if (r.user.profesional) {\n                profile = r.user.profesional.personaFisica;\n            } else {\n                profile = r.user.afiliado.personaFisica;\n            }\n            profile.initials = profile.nombre[0].toUpperCase() + profile.apellido[0].toUpperCase();\n            r.setStorage('profile', profile);\n            if (r.hasRole('ADMIN')) {\n                state.go('admin');\n            } else {\n                state.go('app');\n            }\n        }, function(data) {\n            vm.wrongUserError = true;\n        });\n    };\n\n    vm.forgotPass = function() {\n        authService.forgot(vm.forgot).then(function(data) {\n            state.go('app');\n        });\n    };\n\n    vm.resetPass = function() {\n        authService.reset(vm.forgot).then(function(data) {\n            state.go('app');\n        });\n    };\n\n    vm.removeDom = function(index) {\n        vm.newUser.personaFisica.domicilios.splice(index, 1);\n    };\n\n    vm.addTel = function() {\n        if (vm.newUser.personaFisica.telefono && vm.newUser.personaFisica.telefono !== '') {\n            vm.newUser.personaFisica.telefonosA.push(vm.newUser.personaFisica.telefono);\n            vm.newUser.personaFisica.telefono = '';\n        }\n    };\n\n    vm.removeTel = function(index) {\n        vm.newUser.personaFisica.telefonosA.splice(index, 1);\n    };\n\n    vm.validateSave = function() {\n        if (vm.newUser.personaFisica.telefonosA.length !== 0) {\n            if (vm.newUser.personaFisica.domicilios.length !== 0) {\n                return true;\n            } else {\n                growl.error(\"Ingrese al menos una direccion.\");\n            }\n        } else {\n            growl.error(\"Ingrese al menos un telefono.\");\n        }\n        return false;\n\n    }\n\n    vm.saveNew = function() {\n        vm.newUser.personaFisica.telefonos = vm.newUser.personaFisica.telefonosA.toString();\n        if(vm.validateSave()){            \n            authService.signUp(vm.newUser, Boolean(vm.isPro)).then(function() {\n                vm.done = true;\n            });\n        }\n    };\n\n    vm.placeChanged = function() {\n        var place = this.getPlace();\n        var componentForm = {\n            street_number: {\n                type: 'short_name',\n                name: 'numero'\n            },\n            route: {\n                type: 'long_name',\n                name: 'calle'\n            },\n            locality: {\n                type: 'short_name',\n                name: 'localidad'\n            },\n            administrative_area_level_1: {\n                type: 'long_name',\n                name: 'provincia'\n            },\n            country: {\n                type: 'long_name',\n                name: 'pais'\n            },\n            postal_code: {\n                type: 'short_name',\n                name: 'cp'\n            }\n        };\n        var direccion = {};\n        for (var i = 0; i < place.address_components.length; i++) {\n            var addressType = place.address_components[i].types[0];\n            if (componentForm[addressType]) {\n                var val = place.address_components[i][componentForm[addressType].type];\n                direccion[componentForm[addressType].name] = val;\n            }\n        }\n        direccion.latitud = place.geometry.location.lat();\n        direccion.longitud = place.geometry.location.lng();\n        direccion.coordenadas = place.geometry.location.lat() + ',' + place.geometry.location.lng();\n        vm.newUser.personaFisica.domicilios.push(direccion);\n        vm.afilDir = '';\n\n    }\n\n    vm.registrarse = function() {\n        authService.signUp(vm.credenciales).then(function(data) {\n            localStorage.setItem('id_token', data.jwt);\n            r.decoded = jwtHelper.decodeToken(data.jwt);\n            r.user = r.decoded.sub.usuario;\n            r.setStorage('profile', r.decoded.sub.usuario);\n            state.go('app');\n        });\n    };\n\n}","angular.module('vimedo').factory('profesionalesService', ['$rootScope', '$http', profesionalesService]);\r\n\r\nfunction profesionalesService(r, h) {\r\n    var service = {\r\n        getList: getList,\r\n        coordenadas: coordenadas,\r\n        create: create,\r\n        update: update\r\n    };\r\n    return service;\r\n\r\n    function getList() {\r\n        return h.get(apiRoute + '/profesionales/').then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function coordenadas() {\r\n        return h.get(apiRoute + '/coordenadas/').then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function create(obj) {\r\n        obj.isProfesional = true;\r\n        return h.post(apiRoute + '/users/register',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n    function update(obj) {\r\n        return h.put(apiRoute + '/profesionales/',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n}","angular.module('vimedo').controller('profesionalesCtrl', ['$scope', '$rootScope', 'profesionalesService', '$state', 'NgMap','growl', profesionalesCtrl]);\r\n\r\nfunction profesionalesCtrl(s, r, profesionalesService, state, NgMap, growl) {\r\n    var vm = this;\r\n\r\n    vm.profesionales = [];\r\n    vm.profesionalesOrig = [];\r\n    vm.modalPro = {};\r\n\r\n    vm.tableConfig = {\r\n        maxPages: \"10\",\r\n        itemsPerPage: \"8\"\r\n    };\r\n\r\n    NgMap.getMap().then(function(map) {\r\n        vm.map = map;\r\n    });\r\n\r\n    vm.filterList = function() {\r\n        var lower = vm.query.toLowerCase();\r\n        vm.profesionales = vm.profesionalesOrig\r\n            .filter(function(i) {\r\n                if (i.matricula.toLowerCase().indexOf(lower) !== -1 ||\r\n                    i.personaFisica.nombre.toLowerCase().indexOf(lower) !== -1 ||\r\n                    i.personaFisica.apellido.toLowerCase().indexOf(lower) !== -1) {\r\n                    return i;\r\n                }\r\n            });\r\n    }\r\n\r\n    vm.view = function(item) {\r\n        vm.modalPro = item;\r\n        $('#viewModal').modal();\r\n    };\r\n\r\n    vm.updateList = function() {\r\n        profesionalesService.getList().then(function(data) {\r\n            vm.profesionales = data;\r\n            vm.profesionalesOrig = data;\r\n        });\r\n    }\r\n    vm.removeDom = function(index) {\r\n        vm.modalPro.personaFisica.domicilios.splice(index, 1);\r\n    };\r\n\r\n    vm.addTel = function() {\r\n        vm.modalPro.personaFisica.telefonosA.push(vm.modalPro.personaFisica.telefono);\r\n        vm.modalPro.personaFisica.telefono = '';\r\n    };\r\n\r\n    vm.removeTel = function(index) {\r\n        vm.modalPro.personaFisica.telefonosA.splice(index, 1);\r\n    };\r\n\r\n    vm.newPro = function() {\r\n        vm.modalPro = {\r\n            personaFisica: {\r\n                domicilios: [],\r\n                telefonosA: []\r\n            }\r\n        };\r\n        $('#newModal').modal();\r\n    };\r\n    vm.edit = function(item) {\r\n        vm.modalPro = angular.copy(item);\r\n        if (vm.modalPro.personaFisica.telefonos)\r\n            vm.modalPro.personaFisica.telefonosA = vm.modalPro.personaFisica.telefonos.split(',');\r\n        else\r\n            vm.modalPro.personaFisica.telefonosA = [];\r\n        if (vm.modalPro.personaFisica.fechaNacimiento)\r\n            vm.modalPro.personaFisica.nacimiento = new Date(vm.modalPro.personaFisica.fechaNacimiento);\r\n        $('#editModal').modal();\r\n    };\r\n    vm.saveEdit = function() {\r\n        if (vm.validateSave()) {\r\n            vm.modalPro.personaFisica.telefonos = vm.modalPro.personaFisica.telefonosA.toString();\r\n            vm.modalPro.personaFisica.fechaNacimiento = vm.modalPro.personaFisica.nacimiento;\r\n            profesionalesService.update(vm.modalPro).then(function() {\r\n                vm.modalPro = {};\r\n                $('#editModal').modal('hide');\r\n                vm.updateList();\r\n            })\r\n        }\r\n    };\r\n    vm.savePro = function() {\r\n        if (vm.validateSave()) {\r\n            vm.modalPro.personaFisica.telefonos = vm.modalPro.personaFisica.telefonosA.toString();\r\n            profesionalesService.create(vm.modalPro).then(function() {\r\n                vm.modalPro = {};\r\n                $('#newModal').modal('hide');\r\n                vm.updateList();\r\n            })\r\n        }\r\n    };\r\n    vm.validateSave = function() {\r\n        if (vm.modalPro.personaFisica.telefonosA.length !== 0) {\r\n            if (vm.modalPro.personaFisica.domicilios.length !== 0) {\r\n                return true;\r\n            } else {\r\n                growl.error(\"Ingrese al menos una direccion.\");\r\n            }\r\n        } else {\r\n            growl.error(\"Ingrese al menos un telefono.\");\r\n        }\r\n        return false;\r\n\r\n    }\r\n    vm.placeChanged = function() {\r\n        var place = this.getPlace();\r\n        var componentForm = {\r\n            street_number: {\r\n                type: 'short_name',\r\n                name: 'numero'\r\n            },\r\n            route: {\r\n                type: 'long_name',\r\n                name: 'calle'\r\n            },\r\n            locality: {\r\n                type: 'short_name',\r\n                name: 'localidad'\r\n            },\r\n            administrative_area_level_1: {\r\n                type: 'long_name',\r\n                name: 'provincia'\r\n            },\r\n            country: {\r\n                type: 'long_name',\r\n                name: 'pais'\r\n            },\r\n            postal_code: {\r\n                type: 'short_name',\r\n                name: 'cp'\r\n            }\r\n        };\r\n        // console.log(vm.place);\r\n        var direccion = {};\r\n        for (var i = 0; i < place.address_components.length; i++) {\r\n            var addressType = place.address_components[i].types[0];\r\n            if (componentForm[addressType]) {\r\n                var val = place.address_components[i][componentForm[addressType].type];\r\n                // document.getElementById(addressType).value = val;\r\n                direccion[componentForm[addressType].name] = val;\r\n            }\r\n        }\r\n        direccion.latitud = place.geometry.location.lat();\r\n        direccion.longitud = place.geometry.location.lng();\r\n        direccion.coordenadas = place.geometry.location.lat() + ',' + place.geometry.location.lng();\r\n        vm.modalPro.personaFisica.domicilios.push(direccion);\r\n        vm.afilDir = '';\r\n\r\n    }\r\n\r\n    vm.updateList();\r\n}","angular.module('vimedo').factory('pacientesService', ['$rootScope', '$http', pacientesService]);\r\n\r\nfunction pacientesService(r, h) {\r\n    var service = {\r\n        list: list,\r\n        get: get,\r\n        create: create,\r\n        update: update,\r\n        remove: remove\r\n    };\r\n    return service;\r\n\r\n    function list() {\r\n        return h.get(apiRoute + '/afiliados/').then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function get(obj) {\r\n        return h.get(apiRoute + '/afiliados/' + obj._id).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function create(obj) {\r\n        return h.post(apiRoute + '/users/register',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function update(obj) {\r\n        return h.put(apiRoute + '/afiliados/',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function remove(obj) {\r\n        return h.delete(apiRoute + '/afiliados/' + obj._id).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n}","angular.module('vimedo').controller('pacientesCtrl', ['$rootScope', 'pacientesService', '$state', 'NgMap', 'growl', pacientesCtrl]);\r\n\r\nfunction pacientesCtrl(r, pacientesService, state, NgMap, growl) {\r\n    var vm = this;\r\n\r\n    vm.afiliados = [];\r\n    vm.afiliadosOrg = [];\r\n\r\n    vm.modalAfil = {};\r\n    vm.afilSel = {};\r\n\r\n    vm.tableConfig = {\r\n        maxPages: \"10\",\r\n        itemsPerPage: \"8\"\r\n    };\r\n\r\n    NgMap.getMap().then(function(map) {\r\n        vm.map = map;\r\n    });\r\n\r\n    vm.filterList = function() {\r\n        var lower = vm.query.toLowerCase();\r\n        vm.afiliados = vm.afiliadosOrg\r\n        .filter(function(i) {\r\n            if (i.personaFisica &&\r\n                (i.personaFisica.nroDocumento.toLowerCase().indexOf(lower) !== -1 ||\r\n                    i.personaFisica.nombre.toLowerCase().indexOf(lower) !== -1 ||\r\n                    i.personaFisica.apellido.toLowerCase().indexOf(lower) !== -1)) {\r\n                return i;\r\n        }\r\n    });\r\n    }\r\n\r\n    vm.updateList = function() {\r\n        pacientesService.list().then(function(data) {\r\n            vm.afiliados = data;\r\n            vm.afiliadosOrg = data;\r\n        });\r\n    }\r\n    vm.removeDom = function(index) {\r\n        if (vm.modalAfil.afiliado)\r\n            vm.modalAfil.afiliado.domicilios.splice(index, 1);\r\n        else\r\n            vm.afilSel.personaFisica.domicilios.splice(index, 1);\r\n    };\r\n\r\n    vm.addTel = function() {\r\n        if (vm.modalAfil.afiliado) {\r\n            if(vm.modalAfil.afiliado.telefono && vm.modalAfil.afiliado.telefono !== ''){    \r\n                vm.modalAfil.afiliado.telefonosA.push(vm.modalAfil.afiliado.telefono);\r\n                vm.modalAfil.afiliado.telefono = '';\r\n            }\r\n        } else{\r\n            if(vm.afilSel.personaFisica.telefono && vm.afilSel.personaFisica.telefono !== ''){\r\n                vm.afilSel.personaFisica.telefonosA.push(vm.afilSel.personaFisica.telefono);\r\n                vm.afilSel.personaFisica.telefono = '';}\r\n            }\r\n        };\r\n\r\n        vm.removeTel = function(index) {\r\n            if (vm.modalAfil.afiliado)\r\n                vm.modalAfil.afiliado.telefonosA.splice(index, 1);\r\n            else\r\n                vm.afilSel.personaFisica.telefonosA.splice(index, 1);\r\n        };\r\n\r\n        vm.viewAfil = function(afil) {\r\n            vm.afilSel = afil;\r\n            $('#viewModal').modal();\r\n        };\r\n\r\n        vm.edit = function(item) {\r\n            vm.afilSel = angular.copy(item);\r\n            if (vm.afilSel.personaFisica.telefonos)\r\n                vm.afilSel.personaFisica.telefonosA = vm.afilSel.personaFisica.telefonos.split(',');\r\n            else\r\n                vm.afilSel.personaFisica.telefonosA = [];\r\n            if (vm.afilSel.personaFisica.fechaNacimiento)\r\n                vm.afilSel.personaFisica.nacimiento = new Date(vm.afilSel.personaFisica.fechaNacimiento);\r\n            $('#editModal').modal();\r\n        };\r\n        vm.saveEdit = function() {\r\n            if (vm.validateSave()) {\r\n                vm.afilSel.personaFisica.telefonos = vm.afilSel.personaFisica.telefonosA.toString();\r\n                vm.afilSel.personaFisica.fechaNacimiento = vm.afilSel.personaFisica.nacimiento;\r\n                pacientesService.update(vm.afilSel).then(function() {\r\n                    vm.afilSel = {};\r\n                    $('#editModal').modal('hide');\r\n                    vm.updateList();\r\n                })\r\n            }\r\n        };\r\n        vm.validateSave = function() {\r\n            if (vm.afilSel.personaFisica.telefonosA.length !== 0) {\r\n                if (vm.afilSel.personaFisica.domicilios.length !== 0) {\r\n                    return true;\r\n                } else {\r\n                    growl.error(\"Ingrese al menos una direccion.\");\r\n                }\r\n            } else {\r\n                growl.error(\"Ingrese al menos un telefono.\");\r\n            }\r\n            return false;\r\n\r\n        }\r\n\r\n        vm.saveAfil = function() {\r\n            if (vm.validateSave()) {\r\n                vm.modalAfil.afiliado.telefonos = vm.modalAfil.afiliado.telefonosA.toString();\r\n                pacientesService.create(vm.modalAfil).then(function(data) {\r\n                    vm.modalAfil = {};\r\n                    $('#newModal').modal('hide');\r\n                    vm.updateList();\r\n                })\r\n            }\r\n        };\r\n\r\n        vm.newAfil = function() {\r\n        // MapManager.autocomplete('newDireccion');\r\n        vm.modalAfil = {\r\n            afiliado: {\r\n                domicilios: [],\r\n                telefonosA: []\r\n            }\r\n        };\r\n        $('#newModal').modal();\r\n    };\r\n\r\n    vm.placeChanged = function() {\r\n        var place = this.getPlace();\r\n        var componentForm = {\r\n            street_number: {\r\n                type: 'short_name',\r\n                name: 'numero'\r\n            },\r\n            route: {\r\n                type: 'long_name',\r\n                name: 'calle'\r\n            },\r\n            locality: {\r\n                type: 'short_name',\r\n                name: 'localidad'\r\n            },\r\n            administrative_area_level_1: {\r\n                type: 'long_name',\r\n                name: 'provincia'\r\n            },\r\n            country: {\r\n                type: 'long_name',\r\n                name: 'pais'\r\n            },\r\n            postal_code: {\r\n                type: 'short_name',\r\n                name: 'cp'\r\n            }\r\n        };\r\n        // console.log(vm.place);\r\n        var direccion = {};\r\n        for (var i = 0; i < place.address_components.length; i++) {\r\n            var addressType = place.address_components[i].types[0];\r\n            if (componentForm[addressType]) {\r\n                var val = place.address_components[i][componentForm[addressType].type];\r\n                // document.getElementById(addressType).value = val;\r\n                direccion[componentForm[addressType].name] = val;\r\n            }\r\n        }\r\n        direccion.latitud = place.geometry.location.lat();\r\n        direccion.longitud = place.geometry.location.lng();\r\n        direccion.coordenadas = place.geometry.location.lat() + ',' + place.geometry.location.lng();\r\n        vm.modalAfil.afiliado.domicilios.push(direccion);\r\n        vm.afilDir = '';\r\n\r\n    }\r\n    vm.updateList();\r\n}","angular.module('vimedo').factory('solicitudesService', ['$rootScope', '$http', solicitudesService]);\r\n\r\nfunction solicitudesService(r, h) {\r\n    var service = {\r\n        list: list,\r\n        listActive: listActive,\r\n        calcularRutaProfesional:calcularRutaProfesional,\r\n        calcularRutaSolicitud:calcularRutaSolicitud,\r\n        setProfesional:setProfesional,\r\n        autocompleteCie10: cieAutocomplete,\r\n        autocompleteAfiliado: autocompleteAfiliado,\r\n        create: create,\r\n        finalizar: finalizarSolicitud\r\n\r\n    };\r\n    return service;\r\n\r\n    function list() {\r\n        return h.get(apiRoute + '/solicitudesMedicas/').then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n    function listActive() {\r\n        return h.get(apiRoute + '/solicitudesMedicas/active').then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n    function calcularRutaProfesional(id) {\r\n        return h.get(apiRoute + '/solicitudesMedicas/ruta/profesional/'+id).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n    function calcularRutaSolicitud(id) {\r\n        return h.get(apiRoute + '/solicitudesMedicas/ruta/'+id).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function setProfesional(obj) {\r\n        return h.post(apiRoute + '/solicitudesMedicas/setProfesional',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function cieAutocomplete(term){\r\n        return h.get(apiRoute + '/antecedentesMedicos/cieautocomplete?term='+term).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function autocompleteAfiliado(term){\r\n        return h.get(apiRoute + '/antecedentesMedicos/afiliadoautocomplete?term='+term).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function create(obj){\r\n        return h.post(apiRoute + '/solicitudesMedicas/',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n\r\n    function finalizarSolicitud(obj) {\r\n        return h.put(apiRoute + '/solicitudesMedicas/profesional/finalizarSolicitud',obj).then(function(resp) {\r\n            return resp.data;\r\n        });\r\n    }\r\n}","angular.module('vimedo').controller('solicitudesCtrl', ['$rootScope', 'solicitudesService', '$state', 'growl', solicitudesCtrl]);\r\n\r\nfunction solicitudesCtrl(r, solicitudesService, state, growl) {\r\n    var vm = this;\r\n\r\n    vm.solicitudes = [];\r\n    vm.solicitudesOrig = [];\r\n    vm.modalPro = {\r\n        sintomas: [],\r\n        antecedentes: []\r\n    };\r\n    vm.objSel = {};\r\n\r\n    vm.tableConfig = {\r\n        maxPages: \"10\",\r\n        itemsPerPage: \"8\"\r\n    };\r\n    vm.newModal = '';\r\n\r\n    vm.filterList = function() {\r\n        var lower = vm.query.toLowerCase();\r\n        vm.solicitudes = vm.solicitudesOrig\r\n            .filter(function(i) {\r\n                if (i.afiliado.personaFisica.nombre.toLowerCase().indexOf(lower) !== -1 ||\r\n                    i.afiliado.personaFisica.apellido.toLowerCase().indexOf(lower) !== -1) {\r\n                    return i;\r\n                }\r\n            });\r\n    }\r\n\r\n    vm.updateList = function() {\r\n        solicitudesService.list().then(function(data) {\r\n            vm.solicitudes = data;\r\n            vm.solicitudesOrig = data;\r\n        });\r\n    }\r\n    vm.newSol = function() {\r\n        vm.modalPro = {\r\n            sintomas: [],\r\n            antecedentes: []\r\n        };\r\n        $(vm.newModal).modal();\r\n    };\r\n\r\n    vm.view = function(obj) {\r\n        vm.objSel = obj;\r\n        $('#viewModal').modal();\r\n    };\r\n\r\n    vm.finishSave = function() {\r\n        vm.modalPro = {\r\n            sintomas: [],\r\n            antecedentes: []\r\n        };\r\n        vm.updateList();\r\n        $(vm.newModal).modal('hide');\r\n    }\r\n\r\n    vm.updateList();\r\n}","angular.module('vimedo')\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider) {\n        $urlRouterProvider.otherwise(\"/\");\n        $stateProvider\n            .state('app', {\n                url: '/',\n                views: {\n                    '@': {\n                        templateUrl: 'templates/layout.html'\n                    },\n                    'navView@app': {\n                        templateUrl: 'templates/nav.html',\n                        controller: 'navCtrl as ctrl'\n                    },\n                    'sidemenu@app': {\n                        templateUrl: 'templates/sidemenu.html',\n                        controller: 'navCtrl as ctrl'\n                    },\n                    'contentView@app': {\n                        templateUrl: 'templates/index.html',\n                        controller: 'indexCtrl as ctrl'\n                    }\n                }\n            })\n            .state('app.login', {\n                url: 'login',\n                views: {\n                    'loginView@app': {\n                        templateUrl: 'templates/login.html',\n                        controller: 'authCtrl as ctrl'\n                    }\n                }\n            })\n            .state('app.signup', {\n                url: 'registro',\n                views: {\n                    'loginView@app': {\n                        templateUrl: 'templates/signup.html',\n                        controller: 'authCtrl as ctrl'\n                    }\n                }\n            })\n            .state('admin', { url: '/',\n                views: {\n                    '@': {\n                        templateUrl: 'templates/layout.html'\n                    },\n                    'navView@admin': {\n                        templateUrl: 'templates/nav.html',\n                        controller: 'navCtrl as ctrl'\n                    },\n                    'sidemenu@admin': {\n                        templateUrl: 'templates/sidemenu.html',\n                        controller: 'navCtrl as ctrl'\n                    }\n                } })\n            .state('admin.pacientes', {\n                url: 'pacientes',\n                views: {\n                    'contentView@admin': {\n                        templateUrl: 'templates/admin/pacientes.html',\n                        controller: 'pacientesCtrl as ctrl'\n                    }\n                },\n                    data:{\n                        requiresLogin: true,\n                        requiresRole: ['ADMIN']\n                    }\n            })\n            .state('admin.medicos', {\n                url: 'profesionales',\n                views: {\n                    'contentView@admin': {\n                        templateUrl: 'templates/admin/medicos.html',\n                        controller: 'profesionalesCtrl as ctrl'\n                    }\n                },\n                    data:{\n                        requiresLogin: true,\n                        requiresRole: ['ADMIN']\n                    }\n            })\n            .state('admin.historial', {\n                url: 'historial',\n                views: {\n                    'contentView@admin': {\n                        templateUrl: 'templates/admin/historial.html',\n                        controller: 'solicitudesCtrl as ctrl'\n                    }\n                },\n                    data:{\n                        requiresLogin: true,\n                        requiresRole: ['ADMIN']\n                    }\n            });\n        $locationProvider.html5Mode(true);\n    }]);","angular.module('vimedo')\r\n    .component('modalNuevaSolicitud', {\r\n        templateUrl: './components/modal-nueva-solicitud.html',\r\n        //transclude: true,\r\n        bindings: {\r\n            modal: '&',\r\n            obj: '<',\r\n            finishAction: '&'\r\n        },\r\n        controller: ['solicitudesService', 'growl', function(solicitudesService, growl) {\r\n\r\n            var vm = this;\r\n\r\n            this.$onInit = function() {\r\n                vm.uniqueId = String(performance.now()).replace('.', '');\r\n                vm.modal({\r\n                    modal: '#modal_' + vm.uniqueId\r\n                });\r\n            };\r\n\r\n            vm.autocompleteCie = function(val) {\r\n                return solicitudesService.autocompleteCie10(val).then(function(data) {\r\n                    return data;\r\n                })\r\n            }\r\n\r\n            vm.autocompleteAfil = function(val) {\r\n                return solicitudesService.autocompleteAfiliado(val).then(function(data) {\r\n                    return data;\r\n                })\r\n            }\r\n\r\n            vm.selectSintoma = function(item, type) {\r\n                if (item && item.dec10) {\r\n                    if (type) {\r\n                        vm.obj.antecedentes.push(item);\r\n                    } else {\r\n                        vm.obj.sintomas.push(item);\r\n                    }\r\n                }\r\n                if (!item && ((!type && vm.asyncSelected !== '') || (type && vm.asyncSelectedA !== ''))) {\r\n                    if (type) {\r\n                        vm.obj.antecedentes.push({\r\n                            dec10: vm.asyncSelectedA\r\n                        });\r\n                    } else {\r\n                        vm.obj.sintomas.push({\r\n                            dec10: vm.asyncSelected\r\n                        });\r\n                    }\r\n                }\r\n                vm.asyncSelected = '';\r\n                vm.asyncSelectedA = '';\r\n            };\r\n\r\n            vm.removeSintoma = function(index, type) {\r\n                if (type) {\r\n                    vm.obj.antecedentes.splice(index, 1);\r\n                } else {\r\n                    vm.obj.sintomas.splice(index, 1);\r\n                }\r\n            };\r\n            vm.savePro = function() {\r\n                if (vm.obj.afiliado)\r\n                    if (vm.obj.domicilioSel) {\r\n                        if (vm.obj.sintomas && vm.obj.sintomas.length !== 0) {\r\n                            var sintomasCie = [];\r\n                            var sintomas = [];\r\n                            var antecedentesCie = [];\r\n                            var antecedentes = [];\r\n                            vm.obj.sintomas.map(function(item) {\r\n                                if (item._id) {\r\n                                    sintomasCie.push(item._id);\r\n                                } else {\r\n                                    sintomas.push(item.dec10);\r\n                                }\r\n                            });\r\n                            vm.obj.antecedentes.map(function(item) {\r\n                                if (item._id) {\r\n                                    antecedentesCie.push(item._id);\r\n                                } else {\r\n                                    antecedentes.push(item.dec10);\r\n                                }\r\n                            });\r\n\r\n                            var req = {\r\n                                'sintomas': sintomas.toString(),\r\n                                'sintomasCie': sintomasCie,\r\n                                'horasSintomas': vm.obj.horasSintomas ? vm.obj.horasSintomas : 0,\r\n                                'minutosSintomas': vm.obj.minutosSintomas ? vm.obj.minutosSintomas : 0,\r\n                                'afiliado': vm.obj.afiliado._id,\r\n                                'domicilio': vm.obj.domicilioSel._id,\r\n                                'antecedentesCie': antecedentesCie,\r\n                                'antecedentes': antecedentes.toString()\r\n                            };\r\n\r\n                            solicitudesService.create(req).then(function() {\r\n                                vm.finishAction();\r\n                            })\r\n                        } else {\r\n                            growl.error('Seleccione por lo menos un sintoma.');\r\n                        }\r\n                    } else {\r\n                        growl.error('Seleccione por lo menos un domicilio.');\r\n                    }\r\n                else\r\n                    growl.error('Seleccione un afiliado.');\r\n            };\r\n\r\n        }]\r\n    });"]}